id_tps <- cormat(idcor=all_id,data=datacor,thr=0.7)
#Order the remaining variables in decreasing order of importance
#varcor : variable to explain
#all_id : vector of variable to use in the correlation
#dat_cor: dataset to be used
#ord : stat to be used to sort the variable (R2, PERVAR percentage of total variance,PEARSON coefficient)
look_cor <- function(all_id,dat_cor=datacor,varcor,ord){
#all_id=all_id
#dat_cor=data_fisheyes
#varcor="esthe_fisheyes_all"
#ord="R2"
modall <- lm(as.formula(paste(varcor," ~ ", paste(all_id, collapse= "+"))),data=dat_cor, na.action=na.omit)
out_data <- as.data.frame(matrix(NA,ncol=4,nrow=length(all_id)))
colnames(out_data) <- c("var","pervar","R2","pearson.p")
out_data$var <- all_id
for (i in 1:length(all_id))
{
cort <- cor.test(dat_cor[,varcor],dat_cor[,all_id[i]])
out_data$pearson.p[i] <- cort$p.value
modminus <- lm(as.formula(paste(varcor," ~ ", paste(all_id[-i], collapse= "+"))),data=dat_cor, na.action=na.omit)
modalone <- lm(as.formula(paste(varcor," ~ ", all_id[i])),data=dat_cor, na.action=na.omit)
out_data$pervar[i] <- (100-(summary(modminus)[[8]]/summary(modall)[[8]])*100)
out_data$R2[i] <- summary(modalone)[[8]]
}
if (ord=="R2") corres <- out_data[order(-out_data$R2),]
if (ord=="PERVAR") corres <- out_data[order(-out_data$pervar),]
if (ord=="PEARSON") corres <- out_data[order(-out_data$pearson.p),]
return(corres)
}
ord <- look_cor(id_tps,dat_cor=datacor,varcor,ord="PERVAR")
id_ord <- ord$var
modall <- lm(as.formula(paste(varcor," ~ ", paste(id_ord, collapse= "+"))),data=datacor)
summary(modall)
#Keep the variables that are  significant
id_final <- c("CL_cie_d_mean","LS_sd_light","LS_mean_satu",
"MO_Fourier_pc1","MO_Fourier_pc2","LS_mean_light","SH_perimeter_mean","SH_core.area.index_sd",
"SH_perim.area.ratio_sd","SH_n.core.cell_mean")
modfinal <- lm(as.formula(paste(varcor," ~ ", paste(id_final, collapse= "+"))),data=datacor)
summary(modfinal)
#remove SH_n.core.cell_mean which is not significant anymore
id_final <- c("CL_cie_d_mean","LS_sd_light","LS_mean_satu",
"MO_Fourier_pc1","MO_Fourier_pc2","LS_mean_light","SH_perimeter_mean","SH_core.area.index_sd",
"SH_perim.area.ratio_sd")
modfinal <- lm(as.formula(paste(varcor," ~ ", paste(id_final, collapse= "+"))),data=datacor)
summary(modfinal)
data_scale <-  cbind.data.frame(esthe_pred=datacor$esthe_pred, scale(datacor[,id_final]))
modfinal <- lm(as.formula(paste(varcor," ~ ", paste(id_final, collapse= "+"))),data=data_scale)
sum_mod <- summary(modfinal)
x <- rownames(sum_mod$coefficients)
x <-x[-1]
Estimate <- sum_mod$coefficients[-1,"Estimate"]
sdev <- sum_mod$coefficients[-1,"Std. Error"]
data_plot <- cbind.data.frame(name=x,Estimate=Estimate,sdev=sdev)
data_plot <- data_plot[order(data_plot$Estimate,decreasing = FALSE),]
data_plot$pos <- NA
for (i in 1:length(data_plot$pos)) {if (data_plot$Estimate[i]<0) data_plot$pos[i]=10 else data_plot$pos[i]=-35}
library(ggplot2)
theme_set(theme_bw())
ggplot(data_plot) +
geom_bar( aes(x=name, y=Estimate), stat="identity",  fill=c("tomato1","tomato1","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3"), alpha=0.8) +
geom_errorbar( aes(x=name, ymin=Estimate-sdev, ymax=Estimate+sdev), width=0.3, colour="azure4", alpha=0.9, size=1) +
scale_x_discrete(limits=data_plot$name)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text=element_text(size=10, family = "serif"),
axis.title=element_text(size=18, family = "serif")
) +
xlab("Images Features") +
ylab("Estimates (scaled)") +
coord_flip() +
geom_text(aes(x=name, y=pos,label = name),hjust = 0,size=4, family = "serif")
data_plot
data_plot$name <- c("circularity","pattern_var","pattern_asym","mean_light","morpho_2","pattern_repet","sd_ light","color_sat","color_hetero")
data_plot$name
ggplot(data_plot) +
geom_bar( aes(x=name, y=Estimate), stat="identity",  fill=c("tomato1","tomato1","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3"), alpha=0.8) +
geom_errorbar( aes(x=name, ymin=Estimate-sdev, ymax=Estimate+sdev), width=0.3, colour="azure4", alpha=0.9, size=1) +
scale_x_discrete(limits=data_plot$name)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text=element_text(size=10, family = "serif"),
axis.title=element_text(size=18, family = "serif")
) +
xlab("Images Features") +
ylab("Estimates (scaled)") +
coord_flip() +
geom_text(aes(x=name, y=pos,label = name),hjust = 0,size=4, family = "serif")
ggplot(data_plot) +
geom_bar( aes(x=name, y=Estimate), stat="identity",  fill=c("tomato1","tomato1","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3"), alpha=0.8) +
geom_errorbar( aes(x=name, ymin=Estimate-sdev, ymax=Estimate+sdev), width=0.3, colour="azure4", alpha=0.9, size=1) +
scale_x_discrete(limits=data_plot$name)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text=element_text(size=10, family = "serif"),
axis.title=element_text(size=18, family = "serif")
) +
xlab("Images Features") +
ylab("Estimates (scaled)") +
coord_flip() +
geom_text(aes(x=name, y=pos,label = name),hjust = 0,size=5, family = "serif")
data_plot$name <- c("circularity","pattern variation","pattern asymetry","mean light","morpho_2","pattern repetition","sd light","color saturation","color heterogeneity")
ggplot(data_plot) +
geom_bar( aes(x=name, y=Estimate), stat="identity",  fill=c("tomato1","tomato1","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3"), alpha=0.8) +
geom_errorbar( aes(x=name, ymin=Estimate-sdev, ymax=Estimate+sdev), width=0.3, colour="azure4", alpha=0.9, size=1) +
scale_x_discrete(limits=data_plot$name)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text=element_text(size=10, family = "serif"),
axis.title=element_text(size=18, family = "serif")
) +
xlab("Images Features") +
ylab("Estimates (scaled)") +
coord_flip() +
geom_text(aes(x=name, y=pos,label = name),hjust = 0,size=5, family = "serif")
data_plot$name <- c("Elongatedness","Pattern variation","Pattern asymetry","Mean light","Morpho_2","Pattern repetition","Sd light","Color saturation","Color heterogeneity")
library(ggplot2)
theme_set(theme_bw())
plot <-  ggplot(data_plot) +
geom_bar( aes(x=name, y=Estimate), stat="identity",  fill=c("tomato1","tomato1","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3"), alpha=0.8) +
geom_errorbar( aes(x=name, ymin=Estimate-sdev, ymax=Estimate+sdev), width=0.3, colour="azure4", alpha=0.9, size=1) +
scale_x_discrete(limits=data_plot$name)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text=element_text(size=10, family = "serif"),
axis.title=element_text(size=18, family = "serif")
) +
xlab("Images Features") +
ylab("Estimates (scaled)") +
coord_flip() +
geom_text(aes(x=name, y=pos,label = name),hjust = 0,size=5, family = "serif")
ggplot2::ggsave(filename = here::here("figures_tables", "FIGURE_2a.jpg"),
plot, width = 14, height = 18, units = "cm", dpi = 600)
data_scale <-  cbind.data.frame(esthe_pred=datacor$esthe_pred, scale(datacor[,id_final]))
data_scale
data_scale <-  cbind.data.frame(esthe_pred=datacor$esthe_pred, scale(datacor[,id_final]))
##Change the names of the variables (see Text F in S1 File)
colnames(data_scale) <- c("esthe_pred","Color heterogeneity","SD light","Color saturation","Elongatedness",
"Morpho_2","Mean light","Pattern repetition","Pattern asymetry","Pattern variation")
pca_fish<-ade4::dudi.pca(data_scale[,-1], scannf=FALSE, nf = 5)
factoextra::fviz_eig(pca_fish,main = "Eigenvalues")
source(here::here("R/shadow_text.R"))
n_bins <- 255
couleurs <- c('#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#e0f3f8',
'#abd9e9', '#74add1', '#4575b4', '#313695')
couleurs <- colorRampPalette(couleurs)(n_bins)
couleurs <- rev(couleurs)
couleurs <- paste0(couleurs, "dd")
z_range <- range(data_scale$"esthe_pred")
z_bins  <- seq(z_range[1], z_range[2], length.out = n_bins + 1)
z_colors <- rep(NA, length(data_scale$"esthe_pred"))
for (i in 1:n_bins) {
if (i == n_bins) {
pos <- which(data_scale$"esthe_pred" >= z_bins[i] &
data_scale$"esthe_pred" <= z_bins[i + 1])
} else {
pos <- which(data_scale$"esthe_pred" >= z_bins[i] &
data_scale$"esthe_pred" <  z_bins[i + 1])
}
if (length(pos)) {
z_colors[pos] <- couleurs[i]
}
}
inds <- pca_fish$"li"
eigens <- round(100 * pca_fish$eig / sum(pca_fish$eig) , 1)
eigens <- eigens[1:2]
ordre <- order(data_scale$"esthe_pred", decreasing = FALSE)
png(filename = here::here("figures_tables", "FIGURE_2b.png"), width = 12, height = 12, res = 600,
units = "in", pointsize = 16)
par(xaxs = "i", yaxs = "i", mar = c(2.5, 2.5, 1, 1), family = "serif", new = FALSE)
plot(0, type = "n", xlim = c(-9, 7), ylim = c(-7, 8), ann = FALSE, bty = "n",
axes = FALSE)
grid(lty = 1, lwd = 0.5, col = "#cccccc")
par(mgp = c(3, 0.25, 0))
axis(1, lwd = 0)
axis(2, lwd = 0, las = 1)
mtext(text = paste0("Dimension 1 (", eigens[1],"%)"), side = 1, line = 1.25,cex=1.8)
mtext(text = paste0("Dimension 2 (", eigens[2],"%)"), side = 2, line = 1.25,cex=1.8)
points(inds[ordre, 1:2], pch = 19, col = z_colors[ordre])
par(new = TRUE)
plot(0, type = "n", xlim = c(-1.29, 1), ylim = c(-0.87, 1), ann = FALSE, bty = "n",
axes = FALSE)
vars <- pca_fish$co
for (i in 1:nrow(vars)) {
shape::Arrows(0, 0, vars[i, 1], vars[i, 2], arr.type = "triangle", lwd = 3.50,
arr.width = 0.15, arr.length = 0.15, col = "white")
shape::Arrows(0, 0, vars[i, 1], vars[i, 2], arr.type = "triangle", lwd = 2.25,
arr.width = 0.15, arr.length = 0.15, col = "#111111")
}
abline(h = 0, v = 0, lwd = 1, lty = 1, col = "#333333")
box(col = "#cccccc", lwd = 1)
for (i in 1:nrow(vars)) {
pos <- 1
if (i %in% c(5,3,1,8,9)) {
pos <- 2
}
if (i %in% c(2,7)) {
pos <- 3
}
shadow_text(x = vars[i, 1], y = vars[i, 2], labels = rownames(vars)[i],
pos = pos, cex = 0.95, font = 2, col = "black", bg = "#FFFFFF33",
radius = 0.1)
}
par(new = TRUE)
y_bot <- 5.0
plot(0, type = "n", xlim  = c(-9, 7), ylim = c(-7, 8), ann = FALSE, bty = "n",
axes = FALSE)
inc <- 0.01
for (i in 1:length(couleurs))
rect(5, y_bot + (i - 1) * inc, 5.5, y_bot + i * inc, col = couleurs[i],
border = couleurs[i])
llabels <- c(1250, 1500, 1750, 2000)
for (i in llabels) {
pos <- which(z_bins > i)[1]
text(5.5, y_bot + pos * inc, i, pos = 4, cex = .85)
lines(c(5.0, 5.1), rep(y_bot + pos * inc, 2), col = "white")
lines(c(5.4, 5.5), rep(y_bot + pos * inc, 2), col = "white")
}
shadow_text(5.25, y_bot - 0.75, "Aesthetic",
pos = 3, cex = 1.6, font = 1, col = "black", bg = "#FFFFFF33",
radius = 0.1)
dev.off()
data_plot$name <- c("Elongatedness","Pattern variation","Pattern asymmetry","Mean light","Morpho_2","Pattern repetition","SD light","Color saturation","Color heterogeneity")
##Draw the figure
library(ggplot2)
theme_set(theme_bw())
plot <-  ggplot(data_plot) +
geom_bar( aes(x=name, y=Estimate), stat="identity",  fill=c("tomato1","tomato1","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3","seagreen3"), alpha=0.8) +
geom_errorbar( aes(x=name, ymin=Estimate-sdev, ymax=Estimate+sdev), width=0.3, colour="azure4", alpha=0.9, size=1) +
scale_x_discrete(limits=data_plot$name)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text=element_text(size=10, family = "serif"),
axis.title=element_text(size=18, family = "serif")
) +
xlab("Images Features") +
ylab("Estimates (scaled)") +
coord_flip() +
geom_text(aes(x=name, y=pos,label = name),hjust = 0,size=5, family = "serif")
ggplot2::ggsave(filename = here::here("figures_tables", "FIGURE_2a.jpg"),
plot, width = 14, height = 18, units = "cm", dpi = 600)
data_scale <-  cbind.data.frame(esthe_pred=datacor$esthe_pred, scale(datacor[,id_final]))
##Change the names of the variables (see Text F in S1 File)
colnames(data_scale) <- c("esthe_pred","Color heterogeneity","SD light","Color saturation","Elongatedness",
"Morpho_2","Mean light","Pattern repetition","Pattern asymmetry","Pattern variation")
pca_fish<-ade4::dudi.pca(data_scale[,-1], scannf=FALSE, nf = 5)
factoextra::fviz_eig(pca_fish,main = "Eigenvalues")
##with ggplot (old version )
# library(ggplot2)
# factoextra::fviz_pca_biplot(pca_fish,
#                             col.ind       = data_scale$esthe_pred,
#                             geom          = "point",
#                             gradient.cols = c("blue", "green","yellow","orange", "red" ),
#                             repel         = TRUE,
#                             col.var       = "darkblue",
#                             geom.var      = c("arrow", "text"),
#                             alpha.ind     = 0.9,
#                             ggtheme       = theme_minimal(),
#                             ylim          = c(-5,6),
#                             xlim          = c(-7,5),
#                             legend.position = c(0.2, 0.8)) +
#   labs(col="Aesthetic", title = " ") +
#   theme(legend.position = c(0.95, 0.9))
## old fashion (thanks Nicolas_C !)
source(here::here("R/shadow_text.R"))
n_bins <- 255
couleurs <- c('#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#e0f3f8',
'#abd9e9', '#74add1', '#4575b4', '#313695')
couleurs <- colorRampPalette(couleurs)(n_bins)
couleurs <- rev(couleurs)
couleurs <- paste0(couleurs, "dd")
z_range <- range(data_scale$"esthe_pred")
z_bins  <- seq(z_range[1], z_range[2], length.out = n_bins + 1)
z_colors <- rep(NA, length(data_scale$"esthe_pred"))
for (i in 1:n_bins) {
if (i == n_bins) {
pos <- which(data_scale$"esthe_pred" >= z_bins[i] &
data_scale$"esthe_pred" <= z_bins[i + 1])
} else {
pos <- which(data_scale$"esthe_pred" >= z_bins[i] &
data_scale$"esthe_pred" <  z_bins[i + 1])
}
if (length(pos)) {
z_colors[pos] <- couleurs[i]
}
}
inds <- pca_fish$"li"
eigens <- round(100 * pca_fish$eig / sum(pca_fish$eig) , 1)
eigens <- eigens[1:2]
ordre <- order(data_scale$"esthe_pred", decreasing = FALSE)
png(filename = here::here("figures_tables", "FIGURE_2b.png"), width = 12, height = 12, res = 600,
units = "in", pointsize = 16)
par(xaxs = "i", yaxs = "i", mar = c(2.5, 2.5, 1, 1), family = "serif", new = FALSE)
plot(0, type = "n", xlim = c(-9, 7), ylim = c(-7, 8), ann = FALSE, bty = "n",
axes = FALSE)
grid(lty = 1, lwd = 0.5, col = "#cccccc")
par(mgp = c(3, 0.25, 0))
axis(1, lwd = 0)
axis(2, lwd = 0, las = 1)
mtext(text = paste0("Dimension 1 (", eigens[1],"%)"), side = 1, line = 1.25,cex=1.8)
mtext(text = paste0("Dimension 2 (", eigens[2],"%)"), side = 2, line = 1.25,cex=1.8)
points(inds[ordre, 1:2], pch = 19, col = z_colors[ordre])
par(new = TRUE)
plot(0, type = "n", xlim = c(-1.29, 1), ylim = c(-0.87, 1), ann = FALSE, bty = "n",
axes = FALSE)
vars <- pca_fish$co
for (i in 1:nrow(vars)) {
shape::Arrows(0, 0, vars[i, 1], vars[i, 2], arr.type = "triangle", lwd = 3.50,
arr.width = 0.15, arr.length = 0.15, col = "white")
shape::Arrows(0, 0, vars[i, 1], vars[i, 2], arr.type = "triangle", lwd = 2.25,
arr.width = 0.15, arr.length = 0.15, col = "#111111")
}
abline(h = 0, v = 0, lwd = 1, lty = 1, col = "#333333")
box(col = "#cccccc", lwd = 1)
for (i in 1:nrow(vars)) {
pos <- 1
if (i %in% c(5,3,1,8,9)) {
pos <- 2
}
if (i %in% c(2,7)) {
pos <- 3
}
shadow_text(x = vars[i, 1], y = vars[i, 2], labels = rownames(vars)[i],
pos = pos, cex = 0.95, font = 2, col = "black", bg = "#FFFFFF33",
radius = 0.1)
}
par(new = TRUE)
y_bot <- 5.0
plot(0, type = "n", xlim  = c(-9, 7), ylim = c(-7, 8), ann = FALSE, bty = "n",
axes = FALSE)
inc <- 0.01
for (i in 1:length(couleurs))
rect(5, y_bot + (i - 1) * inc, 5.5, y_bot + i * inc, col = couleurs[i],
border = couleurs[i])
llabels <- c(1250, 1500, 1750, 2000)
for (i in llabels) {
pos <- which(z_bins > i)[1]
text(5.5, y_bot + pos * inc, i, pos = 4, cex = .85)
lines(c(5.0, 5.1), rep(y_bot + pos * inc, 2), col = "white")
lines(c(5.4, 5.5), rep(y_bot + pos * inc, 2), col = "white")
}
shadow_text(5.25, y_bot - 0.75, "Aesthetic",
pos = 3, cex = 1.6, font = 1, col = "black", bg = "#FFFFFF33",
radius = 0.1)
dev.off()
nbc <- 10
require(dplyr)
# load data
load(file = here::here("data", "table_elo_judge.RData"))
# source functions
source(here::here("R", "functions_elo.R"))
table_elo_judge$age_cat <- ifelse(table_elo_judge$age <= 14, "A",
ifelse(table_elo_judge$age > 14 & table_elo_judge$age <= 25, "B",
ifelse(table_elo_judge$age > 25 &
table_elo_judge$age <= 40, "C",
ifelse(table_elo_judge$age > 40 &
table_elo_judge$age <= 60, "D", "E"))))
table_elo_judge$age_cat <- factor(table_elo_judge$age_cat)
europe <- c("ALA", "ALB", "AND", "AUT", "BEL", "BGR", "BIH", "BLR", "CHE", "CYP", "CZE", "DEU",
"DNK", "EST", "FIN", "FRO", "GBR", "GIB", "GRC", "HRV", "HUN", "IMN", "IRL", "ISL",
"ITA", "JEY", "LIE", "LTU", "LUX", "LVA", "MCO", "MDA", "MKD", "MLT", "MNE", "NLD",
"NOR", "POL", "ROU", "SJM", "SMR", "SRB", "SVK", "SVN", "SWE", "UKR", "VAT")
table_elo_judge$country_cat <- ifelse(table_elo_judge$country == "FRA", "A",
ifelse(table_elo_judge$country == "USA" , "B",
ifelse(table_elo_judge$country %in% europe, "C", "D")))
table_elo_judge$country_cat <- factor(table_elo_judge$country_cat)
table(table_elo_judge$scuba_diving)
prop.table(prop.table(table(tips$smoker)))
prop.table(prop.table(table(table_elo_judge$scuba_diving)))
species_table <- read.csv(here::here(res_dir_conservation, "01_sptable_all.csv"))
#remove the Datadeficient species
species_table <- species_table[species_table$threats!='dd',]
source(here::here("R", "functions_cons.R"))
# Load species table ----
species_table <- read.csv(here::here(res_dir_biodiversity, "02_sptable_biodiv.csv"))
rm(list = ls())
if (!("here" %in% installed.packages())) install.packages("here")
source(here::here("R", "setup.R"))
colors <- c('#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#e0f3f8',
'#abd9e9', '#74add1', '#4575b4', '#313695')
source(here::here("R", "functions_cons.R"))
# Load species table ----
species_table <- read.csv(here::here(res_dir_biodiversity, "02_sptable_biodiv.csv"))
species_table <- read.csv(here::here(res_dir_conservation, "01_sptable_all.csv"))
#remove the Datadeficient species
species_table <- species_table[species_table$threats!='dd',]
names(species_table)
iucn_table <- species_table[,c("esthe_score","threats")]
table(iucn_table$threats)
iucn_table$evaluated <- "eval"
iucn_table$evaluated[iucn_table$threats=="nev"]="not_eval"
table(iucn_table$evaluated)
model <- lm(esthe_score ~ evaluated, data = iucn_table)
aov(model)
summary(model)
summary(aov(model))
nbc <- 10
require(dplyr)
# load data
load(file = here::here("data", "table_elo_judge.RData"))
# source functions
source(here::here("R", "functions_elo.R"))
head(table_elo_judge)
matches           <- table_elo_judge
colnames(matches) <- c(colnames(matches)[1:2], "challenger_2", "challenger_1",
colnames(matches)[5:ncol(matches)])
matches           <- matches[,c(colnames(matches)[1:2], "challenger_1", "challenger_2",
colnames(matches)[5:ncol(matches)])] # same order
# combine
table_elo_judge <- rbind(table_elo_judge, matches)
head(table_elo_judge)
images_list <- unique(table_elo_judge$challenger_1)
length(images_list)
head(table(table_elo_judge$judge_id,table_elo_judge$challenger_1))
dim(table_elo_judge[table_elo_judge$challenger_1==images_list[1],])
dim(table_elo_judge[table_elo_judge$challenger_1==images_list[2],])
dim(table_elo_judge[table_elo_judge$challenger_1==images_list[3],])
match_dat <- do.call(rbdin,lapply(images_list, function(id){
data.frame(images=id,nb_matche=dim(table_elo_judge[table_elo_judge$challenger_1==images_list[3],]))
}))
match_dat <- do.call(rbind,parallel::mclapply(images_list, function(id){
data.frame(images=id,nb_matche=dim(table_elo_judge[table_elo_judge$challenger_1==images_list[3],]))
},mc.cores = 5))
match_dat
match_dat <- do.call(rbind,parallel::mclapply(images_list, function(id){
data.frame(images=id,nb_matche=dim(table_elo_judge[table_elo_judge$challenger_1==images_list[3],][1]))
},mc.cores = 7))
match_dat
match_dat <- do.call(rbind,parallel::mclapply(images_list, function(id){
data.frame(images=id,nb_matche=dim(table_elo_judge[table_elo_judge$challenger_1==id,])[1])
},mc.cores = 7))
match_dat
densityplot(match_dat$nb_matche)
match_dat %>%
ggplot(aes(x=nb_matche)) +
geom_density( fill="dodgerblue", alpha=0.5)+
labs(x="Number of matches per images")+
geom_vline(xintercept=mean_salary, size=1.5, color="red")
match_dat %>%
ggplot(aes(x=nb_matche)) +
geom_density( fill="dodgerblue", alpha=0.5)+
labs(x="Number of matches per images")+
geom_vline(xintercept=nb_matche, size=1.5, color="red")
dim(match_dat)
dim(table_elo_judge)
780000/2
nbc <- 10
require(dplyr)
# load data
load(file = here::here("data", "table_elo_judge.RData"))
View(table_elo_judge)
unique(table_elo_judge$challenger_1)
length(unique(table_elo_judge$challenger_1))
rm(list = ls())
if (!("here" %in% installed.packages())) install.packages("here")
source(here::here("R", "setup.R"))
nbc <- 10
require(dplyr)
# load data
load(file = here::here("data", "table_elo_judge.RData"))
# source functions
source(here::here("R", "functions_elo.R"))
View(table_elo_judge)
length(unique(challenger_1))
length(unique(table_elo_judge$challenger_1))
all_table  <- read.csv(here::here(res_dir_elo, "02_esthe_focus.csv"))
library(readr)
X02_esthe_focus <- read_csv("results/elo/02_esthe_focus.csv")
View(X02_esthe_focus)
length(which(X02_esthe_focus$focus ==1 & X02_esthe_focus$esthe_all != NA))
length(which(X02_esthe_focus$focus ==1 & X02_esthe_focus$esthe_fisheyes != 0 & X02_esthe_focus$esthe_mayo !=0))
length(which(X02_esthe_focus$focus ==1 & X02_esthe_focus$esthe_fisheyes != 0 | X02_esthe_focus$esthe_mayo !=0))
length(which(X02_esthe_focus$focus ==1 & X02_esthe_focus$esthe_fisheyes != 0)
length(which(X02_esthe_focus$focus ==1 & X02_esthe_focus$esthe_fisheyes != 0))
esthe_focus  <- read.csv(here::here("data", "image_table.csv"))
View(esthe_focus)
length(ewhich(esthe_focus$fisheyes_campgn == 1))
length(which(esthe_focus$fisheyes_campgn == 1))
temp <- read(here::here(res_dir_deep, "06_esthe_focus.csv"))
temp <- read.csv(here::here(res_dir_deep, "06_esthe_focus.csv"))
View(temp)
test <- temp[which(temp$method == "evaluated")]
test <- temp[which(temp$method == "evaluated"),]
View(test)
# performances on the validation sets
val1 <- read.csv(here::here(res_dir_deep, "validation_score", "validation_score1.txt"))
val2 <- read.csv(here::here(res_dir_deep, "validation_score", "validation_score2.txt"))
val3 <- read.csv(here::here(res_dir_deep, "validation_score", "validation_score3.txt"))
val4 <- read.csv(here::here(res_dir_deep, "validation_score", "validation_score4.txt"))
val5 <- read.csv(here::here(res_dir_deep, "validation_score", "validation_score5.txt"))
mean(nrow(val1), nrow(val2), nrow(val3), nrow(val4), nrow(val5))
sd(nrow(val1), nrow(val2), nrow(val3), nrow(val4), nrow(val5))
sd(nrow(val1), nrow(val2), nrow(val3), nrow(val4), nrow(val5))
?sd
sd(as.numeric(nrow(val1), nrow(val2), nrow(val3), nrow(val4), nrow(val5))
)
mean(nrow(val1), nrow(val2), nrow(val3), nrow(val4), nrow(val5))
nrow(val1)
sd(c(nrow(val1), nrow(val2), nrow(val3), nrow(val4), nrow(val5)))
View(all_table)
View(esthe_focus)
library(readr)
X06_esthe_focus <- read_csv("results/deep/06_esthe_focus.csv")
View(X06_esthe_focus)
View(X06_esthe_focus)
esthe_focus  <- read.csv(here::here("data", "image_table.csv"))
View(esthe_focus)
